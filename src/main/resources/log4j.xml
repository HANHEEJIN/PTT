<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "log4j.dtd">
<log4j:configuration
	xmlns:log4j="http://jakarta.apache.org/log4j/">

	<!-- Appenders -->
	<appender name="console"
		class="org.apache.log4j.ConsoleAppender">
		<param name="Target" value="System.out" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%-5p: %c - %m%n" />
		</layout>
	</appender>

	<!-- Application Loggers -->
	<logger name="com.ghs.ptt">
		<level value="info" />
	</logger>

	<!-- 3rdparty Loggers -->
	<logger name="org.springframework.core">
		<level value="info" />
	</logger>

	<logger name="org.springframework.beans">
		<level value="info" />
	</logger>

	<logger name="org.springframework.context">
		<level value="info" />
	</logger>
	

	<logger name="org.springframework.web">
		<level value="info" />
	</logger>

	<!-- 2021.09.02(목) -->
	<!-- SQL, log4jdbc 옵션 설정 -->
	<!-- 
	1) DEBUG : DEBUG 용도
	2) INFO	 : 일반적 데이터 출력
	3) WARN	 : 경고성 메세지, 에러가 아닌 처리 가능한 문제 
	4) ERROR : 일반적 에러, 처리 필수
	5) FATAL : 시스템에 심각한 문제 애러
	 -->
	
	<logger name="jdbc" level="OFF" />
	<logger name="jdbc.connection" level="warn" />  	<!-- 커넥션 open close 이벤트 로그 남김 -->
	
	<logger name="jdbc.sqltiming" additivity="false">	<!-- SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함 -->
		<level value="warn" />
		<appender-ref ref="console"/>
	</logger>
	
	<logger name="jdbc.sqlonly" additivity="false">		<!-- SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여줌 -->
		<level value="info"/>
		<appender-ref ref="console"/>
	</logger>
	<logger name="jdbc.audit" additivity="false">		<!-- ResultSet을 제외한 모든 JDBC 호출 정보로그로 많은 양의 로그가 생성됨,  JDBC 문제를 추적해야 할 필요가 있는 경우만 사용 -->
		<level value="warn"/>
		<appender-ref ref="console"/>
	</logger>
		<logger name="jdbc.resultset" additivity="false">	<!-- ResultSet을 포함한 모든 JDBC 호출 정보 로그 남김(방대한 양의 로그가 생성) -->
		<level value="warn" />
		<appender-ref ref="console"/>
	</logger>
	<logger name="jdbc.resultsettable" additivity="false">	<!-- SQL 결과 조회된 데이터의 table을 로그로 남긴다. -->
		<level value="info"/>
		<appender-ref ref="console"/>
	</logger> 

	<!-- Root Logger -->
	<root>
		<priority value="INFO" />
		<appender-ref ref="console" />
	</root>

</log4j:configuration>
